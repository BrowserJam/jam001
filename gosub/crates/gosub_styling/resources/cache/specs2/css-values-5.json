{
  "spec": {
    "title": "CSS Values and Units Module Level 5",
    "url": "https://drafts.csswg.org/css-values-5/"
  },
  "properties": [
    {
      "name": "interpolate-size",
      "href": "https://drafts.csswg.org/css-values-5/#propdef-interpolate-size",
      "value": "numeric-only | allow-keywords",
      "initial": "numeric-only",
      "appliesTo": "all elements",
      "inherited": "yes",
      "percentages": "n/a",
      "computedValue": "as specified",
      "canonicalOrder": "per grammar",
      "animationType": "not animatable",
      "values": [
        {
          "name": "numeric-only",
          "prose": "An <intrinsic-size-keyword> cannot be interpolated.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-interpolate-size-numeric-only",
          "type": "value",
          "value": "numeric-only"
        },
        {
          "name": "allow-keywords",
          "prose": "Two values can be interpolated if one of them is an <intrinsic-size-keyword> and the other is a <length-percentage>. This is done by treating the <intrinsic-size-keyword> keyword as though it is calc-size(keyword, size) and applying the rules in § 9.3 Interpolating calc-size(). In other cases, an <intrinsic-size-keyword> still cannot be interpolated.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-interpolate-size-allow-keywords",
          "type": "value",
          "value": "allow-keywords"
        }
      ],
      "styleDeclaration": [
        "interpolate-size",
        "interpolateSize"
      ]
    }
  ],
  "atrules": [],
  "selectors": [],
  "values": [
    {
      "name": "<request-url-modifier>",
      "prose": "<request-url-modifier>s are <url-modifier>s that affect the <url>’s resource request by applying associated URL request modifier steps. See CSS Values 4 § 4.5.4 URL Processing Model.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier",
      "type": "type",
      "value": "<crossorigin-modifier> | <integrity-modifier> | <referrerpolicy-modifier>",
      "values": [
        {
          "name": "<crossorigin-modifier>",
          "value": "crossorigin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-crossorigin-modifier",
          "type": "type"
        },
        {
          "name": "crossorigin()",
          "prose": "<crossorigin-modifier> = crossorigin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-crossorigin",
          "type": "function"
        },
        {
          "name": "anonymous",
          "prose": "<crossorigin-modifier> = crossorigin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-anonymous",
          "type": "value",
          "value": "anonymous"
        },
        {
          "name": "use-credentials",
          "prose": "<crossorigin-modifier> = crossorigin(anonymous | use-credentials)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-use-credentials",
          "type": "value",
          "value": "use-credentials"
        },
        {
          "name": "<integrity-modifier>",
          "value": "integrity(<string>)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-integrity-modifier",
          "type": "type"
        },
        {
          "name": "integrity()",
          "prose": "<integrity-modifier> = integrity(<string>)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-integrity",
          "type": "function"
        },
        {
          "name": "<referrerpolicy-modifier>",
          "value": "referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#typedef-request-url-modifier-referrerpolicy-modifier",
          "type": "type"
        },
        {
          "name": "referrerpolicy()",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#funcdef-request-url-modifier-referrerpolicy",
          "type": "function"
        },
        {
          "name": "no-referrer",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-no-referrer",
          "type": "value",
          "value": "no-referrer"
        },
        {
          "name": "no-referrer-when-downgrade",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-no-referrer-when-downgrade",
          "type": "value",
          "value": "no-referrer-when-downgrade"
        },
        {
          "name": "same-origin",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-same-origin",
          "type": "value",
          "value": "same-origin"
        },
        {
          "name": "origin",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-origin",
          "type": "value",
          "value": "origin"
        },
        {
          "name": "strict-origin",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-strict-origin",
          "type": "value",
          "value": "strict-origin"
        },
        {
          "name": "origin-when-cross-origin",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-origin-when-cross-origin",
          "type": "value",
          "value": "origin-when-cross-origin"
        },
        {
          "name": "strict-origin-when-cross-origin",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-strict-origin-when-cross-origin",
          "type": "value",
          "value": "strict-origin-when-cross-origin"
        },
        {
          "name": "unsafe-url",
          "prose": "<referrerpolicy-modifier> = referrerpolicy(no-referrer | no-referrer-when-downgrade | same-origin | origin | strict-origin | origin-when-cross-origin | strict-origin-when-cross-origin | unsafe-url)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-request-url-modifier-unsafe-url",
          "type": "value",
          "value": "unsafe-url"
        }
      ]
    },
    {
      "name": "progress()",
      "prose": "The progress() functional notation returns a <number> value representing the position of one calculation (the progress value) between two other calculations (the progress start value and progress end value). The argument calculations can resolve to any <number>, <dimension>, or <percentage>, but must have a consistent type or else the function is invalid. The result will be a <number>, made consistent with the consistent type of the arguments.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-progress",
      "type": "function"
    },
    {
      "name": "<progress()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-progress-fn",
      "type": "type",
      "value": "progress(<calc-sum> from <calc-sum> to <calc-sum>)"
    },
    {
      "name": "media-progress()",
      "prose": "Similar to the progress() notation, the media-progress() functional notation returns a <number> value representing current value of the specified media query [MEDIAQUERIES-4] as a progress value between two explicit values of the media query (as the progress start value and progress end value).",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-media-progress",
      "type": "function"
    },
    {
      "name": "<media-progress()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-media-progress",
      "type": "type",
      "value": "media-progress(<media-feature> from <calc-sum> to <calc-sum>)"
    },
    {
      "name": "container-progress()",
      "prose": "The container-progress() functional notation is identical to the media-progress() functional notation, except that it accepts container features [CSS-CONTAIN-3] in place of media features.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-container-progress",
      "type": "function"
    },
    {
      "name": "<container-progress()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-container-progress",
      "type": "type",
      "value": "container-progress(<size-feature> [ of <container-name> ]? from <calc-sum> to <calc-sum>)"
    },
    {
      "name": "<progress>",
      "prose": "The <progress> value type represents the mix progress value in a mix notation, and ultimately resolves to a percentage. It can, however, draw that percentage value from sources such as media queries and animation timelines, and can also convert it through an easing function before using it for interpolation.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-progress",
      "type": "type",
      "value": "[ <percentage> | <number> | <'animation-timeline'> ]? && by <easing-function>",
      "values": [
        {
          "name": "<percentage-token>",
          "prose": "Computes to the equivalent <number>: 0% becomes 0, 100% becomes 1, etc.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-percentage-token",
          "type": "value",
          "value": "<percentage-token>"
        },
        {
          "name": "<number>",
          "prose": "Represents the mix progress value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-number",
          "type": "value",
          "value": "<number>"
        },
        {
          "name": "<'animation-timeline'>",
          "prose": "Represents the mix progress value as the progress of the specified animation timeline. The values none and auto, however, are invalid. [CSS-ANIMATIONS-2] [WEB-ANIMATIONS-2]",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-animation-timeline",
          "type": "value",
          "value": "<'animation-timeline'>"
        },
        {
          "name": "<easing-function>",
          "prose": "Converts the specified input mix progress value into an output mix progress value using the specified easing function. [CSS-EASING-1]",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-progress-easing-function",
          "type": "value",
          "value": "<easing-function>"
        }
      ]
    },
    {
      "name": "calc-mix()",
      "prose": "The calc-mix() mix notation represents an interpolated numeric or dimensional value. Like calc(), it is a math function, with the following syntactic form:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-calc-mix",
      "type": "function"
    },
    {
      "name": "<calc-mix()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-mix",
      "type": "type",
      "value": "calc-mix( <progress>, <calc-sum>, <calc-sum> )"
    },
    {
      "name": "transform-mix()",
      "prose": "The transform-mix() mix notation represents an interpolated <transform-list>, with the following syntactic form:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-transform-mix",
      "type": "function"
    },
    {
      "name": "<transform-mix()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-transform-mix",
      "type": "type",
      "value": "transform-mix( <progress>, <transform-list>, <transform-list> )"
    },
    {
      "name": "mix()",
      "prose": "Interpolation of any two property values can be represented by the mix() mix notation, which supports two alternative syntax patterns:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-mix",
      "type": "function"
    },
    {
      "name": "<mix()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-mix",
      "type": "type",
      "value": "mix( <progress> , <whole-value> , <whole-value> ) | mix( <progress> && of <'animation-name'> )"
    },
    {
      "name": "first-valid()",
      "prose": "The first-valid() functional notation inlines the fallback behavior intrinsic to parsing declarations. Unlike most notations, it can accept any valid or invalid syntax in its arguments, and represents the first value among its arguments that is supported (parsed as valid) by the UA as the whole value of the property it’s used in.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-first-valid",
      "type": "function"
    },
    {
      "name": "<first-valid()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-first-valid",
      "type": "type",
      "value": "first-valid( <declaration-value># )"
    },
    {
      "name": "toggle()",
      "prose": "The toggle() expression allows descendant elements to cycle over a list of values instead of inheriting the same value.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-toggle",
      "type": "function"
    },
    {
      "name": "<toggle()>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-toggle",
      "type": "type",
      "value": "toggle( <whole-value># )"
    },
    {
      "name": "attr()",
      "prose": "The attr() function substitutes the value of an attribute on an element into a property, similar to how the var() function substitutes a custom property value into a function.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-attr",
      "type": "function",
      "value": "attr( <attr-name> <attr-type>? , <declaration-value>?)",
      "values": [
        {
          "name": "string",
          "prose": "The substitution value is a CSS string, whose value is the literal value of the attribute. (No CSS parsing or \"cleanup\" of the value is performed.) No value triggers fallback.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-string",
          "type": "value",
          "value": "string"
        },
        {
          "name": "ident",
          "prose": "The substitution value is a CSS <custom-ident>, whose value is the literal value of the attribute, with leading and trailing ASCII whitespace stripped. (No CSS parsing of the value is performed.) If the attribute value, after trimming, is the empty string, there is instead no substitution value. If the <custom-ident>’s value is a CSS-wide keyword or default, there is instead no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-ident",
          "type": "value",
          "value": "ident"
        },
        {
          "name": "color",
          "prose": "Parse a component value from the attribute’s value. If the result is a <hex-color> or a named color ident, the substitution value is that result as a <color>. Otherwise there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-color",
          "type": "value",
          "value": "color"
        },
        {
          "name": "number",
          "prose": "Parse a component value from the attribute’s value. If the result is a <number-token>, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-number",
          "type": "value",
          "value": "number"
        },
        {
          "name": "percentage",
          "prose": "Parse a component value from the attribute’s value. If the result is a <percentage-token>, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-percentage",
          "type": "value",
          "value": "percentage"
        },
        {
          "name": "length",
          "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-length",
          "type": "value",
          "value": "length"
        },
        {
          "name": "angle",
          "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-angle",
          "type": "value",
          "value": "angle"
        },
        {
          "name": "time",
          "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-time",
          "type": "value",
          "value": "time"
        },
        {
          "name": "frequency",
          "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-frequency",
          "type": "value",
          "value": "frequency"
        },
        {
          "name": "flex",
          "prose": "Parse a component value from the attribute’s value. If the result is a <dimension-token> whose unit matches the given type, the result is the substitution value. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-flex",
          "type": "value",
          "value": "flex"
        },
        {
          "name": "<dimension-unit>",
          "prose": "Parse a component value from the attribute’s value. If the result is a <number-token>, the substitution value is a dimension with the result’s value, and the given unit. Otherwise, there is no substitution value.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-attr-dimension-unit",
          "type": "value",
          "value": "<dimension-unit>"
        }
      ]
    },
    {
      "name": "<attr-name>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-name",
      "type": "type",
      "value": "[ <ident-token> '|' ]? <ident-token>"
    },
    {
      "name": "<attr-type>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-attr-type",
      "type": "type",
      "value": "string | ident | color | number | percentage | length | angle | time | frequency | flex | <dimension-unit>"
    },
    {
      "name": "<dimension-unit>",
      "prose": "The <dimension-unit> production matches a literal \"%\" character (that is, a <delim-token> with a value of \"%\") or an ident whose value is any of the CSS units for <length>, <angle>, <time>, <frequency>, or <flex> values (such as px or ms).",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-dimension-unit",
      "type": "type"
    },
    {
      "name": "random()",
      "prose": "The random() function is a math function that represents a random value between a minimum and maximum value, drawn from a uniform distribution, optionally limiting the possible values to a step between those limits:",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-random",
      "type": "function",
      "value": "random( <random-caching-options>? , <calc-sum>, <calc-sum>, [by <calc-sum>]? )"
    },
    {
      "name": "<random-caching-options>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-random-caching-options",
      "type": "type",
      "value": "<dashed-ident> || per-element"
    },
    {
      "name": "random-item()",
      "prose": "The random-item() function resolves to a random item from among its list of items.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-random-item",
      "type": "function",
      "value": "random-item( <random-caching-options> , [ <declaration-value>? ]# )"
    },
    {
      "name": "sibling-count()",
      "prose": "The sibling-count() functional notation represents, as an <integer>, the total number of child elements in the parent of the element on which the notation is used.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-sibling-count",
      "type": "function"
    },
    {
      "name": "sibling-index()",
      "prose": "The sibling-index() functional notation represents, as an <integer>, the index of the element on which the notation is used among the children of its parent. Like :nth-child(), sibling-index() is 1-indexed.",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-sibling-index",
      "type": "function"
    },
    {
      "name": "calc-size()",
      "href": "https://drafts.csswg.org/css-values-5/#funcdef-calc-size",
      "type": "function",
      "value": "calc-size( <calc-size-basis>, <calc-sum>? )",
      "values": [
        {
          "name": "percentage",
          "prose": "The percentage basis keyword indicates a basis size of 100%.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-size-percentage",
          "type": "value",
          "value": "percentage"
        },
        {
          "name": "size",
          "prose": "Within the calc-size calculation, if the calc-size basis is not any, the keyword size is allowed. This keyword is a <length>, and resolves at used value time.",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-size-size",
          "type": "value",
          "value": "size"
        },
        {
          "name": "any",
          "prose": "(If the calc-size basis is any, the calc-size() is a definite length, equal to its calc-size calculation.)",
          "href": "https://drafts.csswg.org/css-values-5/#valdef-calc-size-any",
          "type": "value",
          "value": "any"
        }
      ]
    },
    {
      "name": "<calc-size-basis>",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-calc-size-basis",
      "type": "type",
      "value": "[ <intrinsic-size-keyword> | percentage | <calc-size()> | any | <calc-sum> ]"
    },
    {
      "name": "<intrinsic-size-keyword>",
      "prose": "The <intrinsic-size-keyword> production matches any intrinsic size keywords allowed in the context. For example, in width, it matches auto, min-content, stretch, etc.",
      "href": "https://drafts.csswg.org/css-values-5/#typedef-intrinsic-size-keyword",
      "type": "type"
    }
  ],
  "warnings": [
    {
      "msg": "Missing definition",
      "name": "progress-function()",
      "value": "progress-function( progress value from start value to end value )"
    },
    {
      "msg": "Missing definition",
      "name": "mix-function()",
      "value": "mix-function( <progress>,"
    },
    {
      "msg": "Missing definition",
      "name": "<color-mix()>",
      "value": "color-mix( <progress> && <color-interpolation-method>?, <color>, <color> ) | color-mix( <color-interpolation-method>, [<color> && <percentage [0,100]>?]#{2} )"
    },
    {
      "msg": "Missing definition",
      "name": "<cross-fade()>",
      "value": "cross-fade( <progress>, [ <image> | <color> ], [ <image> | <color> ] ) | cross-fade( <cf-image># )"
    }
  ]
}
