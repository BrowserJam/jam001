use std::ffi::c_char;
use std::ffi::CStr;
use std::ptr;

pub mod wrapper;

use gosub_html5::parser::document::{Document, DocumentBuilder};
use gosub_html5::parser::Html5Parser;
use gosub_rendering::render_tree::{Node, NodeType, RenderTree, TreeIterator};
use gosub_shared::byte_stream::{ByteStream, Encoding};
use wrapper::node::CNode;

/// Initialize a render tree and return an owning pointer to it.
/// If the HTML fails to parse or the html string fails to be converted to Rust,
/// returns a NULL pointer.
///
/// # Safety
/// Takes a read-only pointer owned from the C API representing the HTML source
/// to build a render tree. DO NOT take ownership of this pointer in Rust or the
/// universe might collapse.
///
/// Moves an owning pointer to the rendertree using Box::into_raw() to the C API.
/// This pointer MUST be passed to gosub_rendertree_free() after usage for proper cleanup.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_init(html: *const c_char) -> *mut RenderTree {
    let html_str = unsafe {
        if let Ok(html_str) = CStr::from_ptr(html).to_str() {
            html_str
        } else {
            return ptr::null_mut();
        }
    };
    let mut stream = ByteStream::new(Encoding::UTF8, None);
    stream.read_from_str(html_str, Some(Encoding::UTF8));
    stream.close();

    let doc = DocumentBuilder::new_document(None);
    let parse_result = Html5Parser::parse_document(&mut stream, Document::clone(&doc), None);

    if parse_result.is_ok() {
        let mut rendertree = Box::new(RenderTree::new(&doc));
        rendertree.build();

        Box::into_raw(rendertree)
    } else {
        ptr::null_mut()
    }
}

/// Construct a tree iterator for a render tree and return an owning pointer to it.
///
/// # Safety
/// Moves an owning pointer to the tree iterator using Box::into_raw() to the C API.
/// This pointer MUST be passed to gosub_rendertree_iterator_free() after usage for proper cleanup.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_iterator_init(
    rendertree: *const RenderTree,
) -> *mut TreeIterator {
    let tree_iterator = Box::new(TreeIterator::new(&(*rendertree)));
    Box::into_raw(tree_iterator)
}

/// Takes a tree_iterator and returns a non-owning pointer to the next node
///
/// # Safety
/// Takes a tree_iterator pointer (owned by the C API generated by gosub_rendertree_iterator_init())
/// and modifies it to point to the next tree-order node in the tree. Any heap-allocated data
/// on the current node is free'd before pointing to the next node. Returns a ready-only pointer
/// to the next node.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_next_node(
    tree_iterator: *mut TreeIterator,
) -> *const Node {
    let next = (*tree_iterator).next();
    if let Some(next) = next {
        next.as_ptr() as *const Node
    } else {
        ptr::null()
    }
}

/// Fetch the node data according to the NodeType of the current node.
///
/// # Safety
/// Uses a read-only pointer obtained from gosub_rendertree_next_node()
/// and a mutable pointer owned by the C API to write (copy) the contents
/// of the read-only pointer into the mutable pointer.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_get_node_data(node: *const Node, c_node: *mut CNode) {
    // Change this to a match when we have more types
    if let NodeType::Text(text_node) = &(*node).node_type {
        *c_node = CNode::new_text(&*node, text_node);
    }
}

/// Free the iterator pointer obtained from gosub_rendertree_iterator_init()
///
/// # Safety
/// This takes ownership of the pointer from the C API and transfers it to Rust so it can
/// be deallocated.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_iterator_free(tree_iterator: *mut TreeIterator) {
    let _ = Box::from_raw(tree_iterator);
}

/// Free the rendertree pointer obtained from gosub_rendertree_init()
///
/// # Safety
/// This takes ownership of the pointer from the C API and transfers it to Rust so it can
/// be deallocated.
///
// INTERNAL NOTE: It seems there's a leak happening with the document handle (if you
// check with valgrind) although I cannot figure out how to resolve this memory leak...
// needs more investigation; I've tried various methods.
#[no_mangle]
pub unsafe extern "C" fn gosub_rendertree_free(rendertree: *mut RenderTree) {
    let _ = Box::from_raw(rendertree);
}
