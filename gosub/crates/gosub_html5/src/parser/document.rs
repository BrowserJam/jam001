use core::fmt;
use core::fmt::Debug;
use std::cell::RefCell;
use std::collections::HashMap;
use std::fmt::Display;
use std::ops::{Deref, DerefMut};
use std::rc::{Rc, Weak};

use url::Url;

use gosub_css3::stylesheet::CssStylesheet;
use gosub_shared::byte_stream::Location;
use gosub_shared::types::Result;

use crate::element_class::ElementClass;
use crate::errors::Error;
use crate::node::arena::NodeArena;
use crate::node::data::doctype::DocTypeData;
use crate::node::data::{comment::CommentData, text::TextData};
use crate::node::HTML_NAMESPACE;
use crate::node::{Node, NodeData, NodeId};
use crate::parser::query::SearchType;
use crate::parser::query::{Condition, Query};
use crate::parser::quirks::QuirksMode;
use crate::parser::tree_builder::TreeBuilder;
use crate::util::is_valid_id_attribute_value;
use crate::visit::Visitor;

/// Type of the given document
#[derive(PartialEq, Debug, Copy, Clone)]
pub enum DocumentType {
    /// HTML document
    HTML,
    /// Iframe source document
    IframeSrcDoc,
}

/// Defines a document fragment which can be attached to for instance a <template> element
#[derive(PartialEq)]
pub struct DocumentFragment {
    /// Node elements inside this fragment
    arena: NodeArena,
    /// Document handle of the parent
    pub doc: DocumentHandle,
    /// Host node on which this fragment is attached
    host: NodeId,
}

impl Clone for DocumentFragment {
    /// Clones the document fragment
    fn clone(&self) -> Self {
        Self {
            arena: self.arena.clone(),
            doc: Document::clone(&self.doc),
            host: self.host,
        }
    }
}

impl Debug for DocumentFragment {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        write!(f, "DocumentFragment")
    }
}

impl DocumentFragment {
    /// Creates a new document fragment and attaches it to "host" node inside "doc"
    #[must_use]
    pub(crate) fn new(doc: DocumentHandle, host: NodeId) -> Self {
        Self {
            arena: NodeArena::new(),
            doc,
            host,
        }
    }
}

/// Enum of tasks that can be performed to add or update
/// update nodes in the tree.
///
/// These tasks are generated by a TreeBuilder which is implemented
/// by DocumentTaskQueue which holds a handle to the actual Document
/// to commit changes to.
pub enum DocumentTask {
    CreateElement {
        name: String,
        parent_id: NodeId,
        position: Option<usize>,
        namespace: String,
        location: Location,
    },
    CreateText {
        content: String,
        parent_id: NodeId,
        location: Location,
    },
    CreateComment {
        content: String,
        parent_id: NodeId,
        location: Location,
    },
    InsertAttribute {
        key: String,
        value: String,
        element_id: NodeId,
        location: Location,
    },
}

/// Queue of tasks that will mutate the document to add/update
/// nodes in the tree. These tasks are performed sequentially in the
/// order they are created.
///
/// Once tasks are queued up, a call to flush() will commit all changes
/// to the DOM. If there are errors during the application of these changes,
/// flush() will return a list of the errors encountered but execution is not halted.
///
/// create_element() will generate and return a new NodeId for the parser to keep
/// track of the current context node and optionally store this in a list of open elements.
/// When encountering a closing tag, the parser must pop this ID off of its list.
pub struct DocumentTaskQueue {
    /// Internal counter of the next ID to generate from the NodeArena
    /// without actually registering the node.
    /// WARNING: if nodes are registered in the arena while tasks are being queued
    /// this could lead to conflicts in NodeIds. NodeArena should NOT be used directly
    /// if using a DocumentTaskQueue.
    next_node_id: NodeId,
    /// Reference to the document to commit changes to
    pub(crate) document: DocumentHandle,
    /// List of tasks to commit upon flush() which is cleared after execution finishes.
    // IMPLEMENTATION NOTE: using a vec here since I'm assuming we are
    // executing all tasks at once. If we need to support stopping task
    // execution midway, then maybe a real "queue" structure that pops
    // completed tasks is needed.
    pub(crate) tasks: Vec<DocumentTask>,
}

impl DocumentTaskQueue {
    pub fn is_empty(&self) -> bool {
        self.tasks.is_empty()
    }

    #[allow(dead_code)]
    fn flush(&mut self) -> Vec<String> {
        let mut errors = Vec::new();
        for current_task in &self.tasks {
            match current_task {
                DocumentTask::CreateElement {
                    name,
                    parent_id,
                    position,
                    namespace,
                    location,
                } => {
                    self.document.create_element(
                        name,
                        *parent_id,
                        *position,
                        namespace,
                        location.clone(),
                    );
                }
                DocumentTask::CreateText {
                    content,
                    parent_id,
                    location,
                } => {
                    self.document
                        .create_text(content, *parent_id, location.clone());
                }
                DocumentTask::CreateComment {
                    content,
                    parent_id,
                    location,
                } => {
                    self.document
                        .create_comment(content, *parent_id, location.clone());
                }
                DocumentTask::InsertAttribute {
                    key,
                    value,
                    element_id,
                    location,
                } => {
                    if let Err(err) =
                        self.document
                            .insert_attribute(key, value, *element_id, location.clone())
                    {
                        errors.push(err.to_string());
                    }
                }
            }
        }
        self.tasks.clear();

        errors
    }
}

// See tree_builder.rs for method comments
impl TreeBuilder for DocumentTaskQueue {
    fn create_element(
        &mut self,
        name: &str,
        parent_id: NodeId,
        position: Option<usize>,
        namespace: &str,
        location: Location,
    ) -> NodeId {
        let element = DocumentTask::CreateElement {
            name: name.to_owned(),
            parent_id,
            position,
            namespace: namespace.to_owned(),
            location,
        };
        let new_id = self.next_node_id;
        self.next_node_id = self.next_node_id.next();
        self.tasks.push(element);

        new_id
    }

    fn create_text(&mut self, content: &str, parent_id: NodeId, location: Location) -> NodeId {
        let text = DocumentTask::CreateText {
            content: content.to_owned(),
            parent_id,
            location,
        };
        let new_id = self.next_node_id;
        self.next_node_id = self.next_node_id.next();
        self.tasks.push(text);

        new_id
    }

    fn create_comment(&mut self, content: &str, parent_id: NodeId, location: Location) -> NodeId {
        let comment = DocumentTask::CreateComment {
            content: content.to_owned(),
            parent_id,
            location,
        };
        let new_id = self.next_node_id;
        self.next_node_id = self.next_node_id.next();
        self.tasks.push(comment);

        new_id
    }

    fn insert_attribute(
        &mut self,
        key: &str,
        value: &str,
        element_id: NodeId,
        location: Location,
    ) -> Result<()> {
        let attribute = DocumentTask::InsertAttribute {
            key: key.to_owned(),
            value: value.to_owned(),
            element_id,
            location,
        };
        self.tasks.push(attribute);
        Ok(())
    }
}

impl DocumentTaskQueue {
    pub fn new(document: &DocumentHandle) -> Self {
        let document = Document::clone(document);
        let next_node_id = document.get().arena.peek_next_id();
        Self {
            next_node_id,
            document,
            tasks: Vec::new(),
        }
    }
}

/// Defines a document
#[derive(Debug, PartialEq)]
pub struct Document {
    /// Location of the given document (if any)
    pub location: Option<Url>,
    /// Holds and owns all nodes in the document
    pub(crate) arena: NodeArena,
    /// HTML elements with ID (e.g., <div id="myid">)
    named_id_elements: HashMap<String, NodeId>,
    /// Document type of this document
    pub doctype: DocumentType,
    /// Quirks mode of this document
    pub quirks_mode: QuirksMode,
    /// Loaded stylesheets as extracted from the document
    pub stylesheets: Vec<CssStylesheet>,
}

impl Default for Document {
    /// Returns a default document
    fn default() -> Self {
        Self::new(None)
    }
}

impl Document {
    /// Creates a new document
    #[must_use]
    pub fn new(location: Option<Url>) -> Self {
        Self {
            location,
            arena: NodeArena::new(),
            named_id_elements: HashMap::new(),
            doctype: DocumentType::HTML,
            quirks_mode: QuirksMode::NoQuirks,
            stylesheets: Vec::new(),
        }
    }

    pub fn count_nodes(&self) -> usize {
        self.arena.count_nodes()
    }
    /// Returns a shared reference-counted handle for the document
    pub fn shared(location: Option<Url>) -> DocumentHandle {
        DocumentHandle(Rc::new(RefCell::new(Self::new(location))))
    }

    pub fn peek_next_id(&self) -> NodeId {
        self.arena.peek_next_id()
    }

    /// Fast clone of a lightweight reference-counted handle for the document.  This is a shallow
    /// clone, and different handles will see the same underlying document.
    pub fn clone(handle: &DocumentHandle) -> DocumentHandle {
        DocumentHandle(Rc::clone(&handle.0))
    }

    /// Fetches a node by id or returns None when no node with this ID is found
    pub fn get_node_by_id(&self, node_id: NodeId) -> Option<&Node> {
        self.arena.get_node(node_id)
    }

    /// Fetches a mutable node by id or returns None when no node with this ID is found
    pub fn get_node_by_id_mut(&mut self, node_id: NodeId) -> Option<&mut Node> {
        self.arena.get_node_mut(node_id)
    }

    /// Removes a node by id from the arena. Note that this does not check the nodelist itself to see
    /// if the node is still available as a child or parent in the tree.
    pub fn delete_node(&mut self, node: &Node) {
        self.arena.delete_node(node.id);

        if node.parent.is_some() {
            let parent = self.arena.get_node_mut(node.parent.unwrap()).unwrap();
            parent.children.retain(|&x| x != node.id);
        }
    }

    /// Fetches a node by named id (string) or returns None when no node with this ID is found
    pub fn get_node_by_named_id(&self, named_id: &str) -> Option<&Node> {
        let node_id = self.named_id_elements.get(named_id)?;
        self.arena.get_node(*node_id)
    }

    /// Fetches a mutable node by named id (string) or returns None when no node with this ID is found
    pub fn get_node_by_named_id_mut(&mut self, named_id: &str) -> Option<&mut Node> {
        let node_id = self.named_id_elements.get(named_id)?;
        self.arena.get_node_mut(*node_id)
    }

    /// Retrieves the next sibling NodeId (to the right) of the reference_node or None.
    pub fn get_next_sibling(&self, reference_node: NodeId) -> Option<NodeId> {
        let node = self.get_node_by_id(reference_node)?;
        let parent = self.get_node_by_id(node.parent?)?;

        let idx = parent
            .children
            .iter()
            .position(|&child_id| child_id == reference_node)
            .unwrap();

        let next_idx = idx + 1;
        if parent.children.len() > next_idx {
            return Some(parent.children[next_idx]);
        }

        None
    }

    /// Returns the parent node of the given node, or None when no parent is found
    pub fn parent_node(&self, node: &Node) -> Option<&Node> {
        match node.parent {
            Some(parent_node_id) => self.get_node_by_id(parent_node_id),
            None => None,
        }
    }

    pub fn add_new_node(&mut self, node: Node) -> NodeId {
        // if a node contains attributes when adding to the tree,
        // be sure to handle the special attributes "id" and "class"
        // which need to by queryable by the DOM
        let mut node_named_id: Option<String> = None;
        if let NodeData::Element(element) = &node.data {
            if let Some(named_id) = element.attributes.get("id") {
                node_named_id = Some(named_id.clone());
            }
        }

        // Register the node if needed
        let node_id = if node.is_registered {
            node.id
        } else {
            self.arena.register_node(node)
        };

        // update the node's ID (it uses default ID when first created)
        if let Some(node) = self.get_node_by_id_mut(node_id) {
            if let NodeData::Element(element) = &mut node.data {
                element.set_id(node_id);
            }
        }

        // make named_id (if present) queryable in DOM if it's not mapped already
        if let Some(node_named_id) = node_named_id {
            if !self.named_id_elements.contains_key(&node_named_id)
                && is_valid_id_attribute_value(&node_named_id)
            {
                self.named_id_elements
                    .insert(node_named_id.clone(), node_id);
            }
        }

        node_id
    }

    /// Inserts a node to the parent node at the given position in the children (or none
    /// to add at the end). Will automatically register the node if not done so already
    pub fn add_node(&mut self, node: Node, parent_id: NodeId, position: Option<usize>) -> NodeId {
        let node_id = self.add_new_node(node);

        self.attach_node_to_parent(node_id, parent_id, position);

        node_id
    }

    /// Relocates a node to another parent node
    pub fn relocate(&mut self, node_id: NodeId, parent_id: NodeId) {
        let node = self.arena.get_node_mut(node_id).unwrap();
        assert!(node.is_registered, "Node is not registered to the arena");

        if node.parent.is_some() && node.parent.unwrap() == parent_id {
            // Nothing to do when we want to relocate to its own parent
            return;
        }

        self.detach_node_from_parent(node_id);
        self.attach_node_to_parent(node_id, parent_id, None);
    }

    /// Adds the node as a child the parent node. If position is given, it will be inserted as a
    /// child at that given position
    pub fn attach_node_to_parent(
        &mut self,
        node_id: NodeId,
        parent_id: NodeId,
        position: Option<usize>,
    ) -> bool {
        //check if any children of node have parent as child
        if parent_id == node_id || self.has_cyclic_reference(node_id, parent_id) {
            return false;
        }

        if let Some(parent_node) = self.get_node_by_id_mut(parent_id) {
            // Make sure position can never be larger than the number of children in the parent
            if let Some(mut position) = position {
                if position > parent_node.children.len() {
                    position = parent_node.children.len();
                }
                parent_node.children.insert(position, node_id);
            } else {
                // No position given, add to end of the children list
                parent_node.children.push(node_id);
            }
        }

        let node = self.arena.get_node_mut(node_id).unwrap();
        node.parent = Some(parent_id);

        true
    }

    /// Separates the given node from its parent node (if any)
    pub fn detach_node_from_parent(&mut self, node_id: NodeId) {
        let parent = self.get_node_by_id(node_id).expect("node not found").parent;

        if let Some(parent_id) = parent {
            let parent_node = self
                .get_node_by_id_mut(parent_id)
                .expect("parent node not found");
            parent_node.children.retain(|&id| id != node_id);

            let node = self.get_node_by_id_mut(node_id).expect("node not found");
            node.parent = None;
        }
    }

    /// returns the root node
    pub fn get_root(&self) -> &Node {
        self.arena
            .get_node(NodeId::root())
            .expect("Root node not found !?")
    }

    /// returns the root node
    pub fn get_root_mut(&mut self) -> &mut Node {
        self.arena
            .get_node_mut(NodeId::root())
            .expect("Root node not found !?")
    }

    /// Returns true when the given parent_id is a child of the node_id
    pub fn has_cyclic_reference(&self, node_id: NodeId, parent_id: NodeId) -> bool {
        has_child_recursive(&self.arena, node_id, parent_id)
    }

    /// Check if a given node's children contain a certain tag name
    pub fn contains_child_tag(&self, node_id: NodeId, tag: &str) -> bool {
        if let Some(node) = self.get_node_by_id(node_id) {
            for child_id in &node.children {
                if let Some(child) = self.get_node_by_id(*child_id) {
                    if child.name == tag {
                        return true;
                    }
                }
            }
        }

        false
    }

    pub fn nodes(&self) -> &HashMap<NodeId, Node> {
        self.arena.nodes()
    }
}

// Walk the document tree with the given visitor
pub fn walk_document_tree(doc: &DocumentHandle, visitor: &mut Box<dyn Visitor<Node>>) {
    let binding = doc.get();
    let root = binding.get_root();
    internal_visit(doc, root, visitor);
}

fn internal_visit(doc: &DocumentHandle, node: &Node, visitor: &mut Box<dyn Visitor<Node>>) {
    // Enter node
    match &node.data {
        NodeData::Document(document) => visitor.document_enter(node, document),
        NodeData::DocType(doctype) => visitor.doctype_enter(node, doctype),
        NodeData::Text(text) => visitor.text_enter(node, text),
        NodeData::Comment(comment) => visitor.comment_enter(node, comment),
        NodeData::Element(element) => visitor.element_enter(node, element),
    }

    let binding = doc.get();
    for child_id in &node.children {
        let child = binding.arena.get_node(*child_id).unwrap();
        internal_visit(doc, child, visitor);
    }

    // Leave node
    match &node.data {
        NodeData::Document(document) => visitor.document_leave(node, document),
        NodeData::DocType(doctype) => visitor.doctype_leave(node, doctype),
        NodeData::Text(text) => visitor.text_leave(node, text),
        NodeData::Comment(comment) => visitor.comment_leave(node, comment),
        NodeData::Element(element) => visitor.element_leave(node, element),
    }
}

/// Returns true when the parent node has the child node as a child, or if any of the children of
/// the parent node have the child node as a child.
fn has_child_recursive(arena: &NodeArena, parent_id: NodeId, child_id: NodeId) -> bool {
    let node = arena.get_node(parent_id).cloned();
    if node.is_none() {
        return false;
    }

    let node = node.unwrap();
    for id in &node.children {
        if *id == child_id {
            return true;
        }
        let child = arena.get_node(*id).cloned();
        if has_child(arena, child, child_id) {
            return true;
        }
    }
    false
}

fn has_child(arena: &NodeArena, parent: Option<Node>, child_id: NodeId) -> bool {
    let Some(parent_node) = parent else {
        return false;
    };

    if parent_node.children.is_empty() {
        return false;
    }

    for id in parent_node.children {
        if id == child_id {
            return true;
        }
        let node = arena.get_node(id).cloned();
        if has_child(arena, node, child_id) {
            return true;
        }
    }

    false
}

impl Document {
    /// Print a node and all its children in a tree-like structure
    pub fn print_tree(&self, node: &Node, prefix: String, last: bool, f: &mut fmt::Formatter) {
        let mut buffer = prefix.clone();
        if last {
            buffer.push_str("└─ ");
        } else {
            buffer.push_str("├─ ");
        }

        // buffer.push_str(format!("{} ", node.id).as_str());

        match &node.data {
            NodeData::Document(_) => {
                _ = writeln!(f, "{buffer}Document");
            }
            NodeData::DocType(DocTypeData {
                name,
                pub_identifier,
                sys_identifier,
            }) => {
                _ = writeln!(
                    f,
                    r#"{buffer}<!DOCTYPE {name} "{pub_identifier}" "{sys_identifier}">"#,
                );
            }
            NodeData::Text(TextData { value, .. }) => {
                _ = writeln!(f, r#"{buffer}"{value}""#);
            }
            NodeData::Comment(CommentData { value, .. }) => {
                _ = writeln!(f, "{buffer}<!-- {value} -->");
            }
            NodeData::Element(element) => {
                _ = write!(f, "{}<{}", buffer, element.name);
                for (key, value) in &element.attributes {
                    _ = write!(f, " {key}={value}");
                }

                // for (key, value) in node.style.borrow().iter() {
                //     _ = write!(f, "[CSS: {key}={value}]");
                // }

                _ = writeln!(f, ">");
            }
        }

        if prefix.len() > 40 {
            _ = writeln!(f, "...");
            return;
        }

        let mut buffer = prefix;
        if last {
            buffer.push_str("   ");
        } else {
            buffer.push_str("│  ");
        }

        let len = node.children.len();
        for (i, child) in node.children.iter().enumerate() {
            let child = self.arena.get_node(*child).expect("Child not found");
            self.print_tree(child, buffer.clone(), i == len - 1, f);
        }
    }
}

impl Display for Document {
    fn fmt(&self, f: &mut fmt::Formatter) -> fmt::Result {
        self.print_tree(self.get_root(), String::new(), true, f);
        Ok(())
    }
}

#[derive(Debug)]
pub struct DocumentHandle(pub(crate) Rc<RefCell<Document>>);

impl Display for DocumentHandle {
    fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
        write!(f, "{}", self.0.borrow())
    }
}

impl PartialEq for DocumentHandle {
    fn eq(&self, other: &Self) -> bool {
        self.0.eq(&other.0)
    }
}

// NOTE: it is preferred to use Document::clone() when
// copying a DocumentHandle reference. However, for
// any structs using this handle that use #[derive(Clone)],
// this implementation is required.
impl Clone for DocumentHandle {
    fn clone(&self) -> DocumentHandle {
        DocumentHandle(Rc::clone(&self.0))
    }
}

impl Eq for DocumentHandle {}

impl DocumentHandle {
    /// Retrieves a weak pointer to the document
    pub fn to_weak(&self) -> Weak<RefCell<Document>> {
        Rc::downgrade(&self.0)
    }

    /// Retrieves an immutable reference to the document
    pub fn get(&self) -> impl Deref<Target = Document> + '_ {
        self.0.borrow()
    }

    /// Retrieves a mutable reference to the document
    pub fn get_mut(&mut self) -> impl DerefMut<Target = Document> + '_ {
        self.0.borrow_mut()
    }

    /// Attaches a node to the parent node at the given position in the children (or none
    /// to add at the end).
    pub fn attach_node_to_parent(
        &mut self,
        node_id: NodeId,
        parent_id: NodeId,
        position: Option<usize>,
    ) -> bool {
        self.get_mut()
            .attach_node_to_parent(node_id, parent_id, position)
    }

    /// Separates the given node from its parent node (if any)
    pub fn detach_node_from_parent(&mut self, node_id: NodeId) {
        self.get_mut().detach_node_from_parent(node_id);
    }

    /// Inserts a node to the parent node at the given position in the children (or none
    /// to add at the end). Will automatically register the node if not done so already
    /// Returns the node ID of the inserted node
    pub fn add_node(&mut self, node: Node, parent_id: NodeId, position: Option<usize>) -> NodeId {
        self.get_mut().add_node(node, parent_id, position)
    }

    /// Relocates a node to another parent node
    pub fn relocate(&mut self, node_id: NodeId, parent_id: NodeId) {
        self.get_mut().relocate(node_id, parent_id);
    }

    /// Returns true when there is a cyclic reference from the given node_id to the parent_id
    pub fn has_cyclic_reference(&self, node_id: NodeId, parent_id: NodeId) -> bool {
        self.get().has_cyclic_reference(node_id, parent_id)
    }

    fn insert_id_attribute(
        &mut self,
        value: &str,
        element_id: NodeId,
        _location: Location,
    ) -> Result<()> {
        if !is_valid_id_attribute_value(value) {
            return Err(Error::DocumentTask(format!(
                "Attribute value '{value}' did not pass validation",
            ))
            .into());
        }

        // an ID must be tied to only one element
        if self.get().named_id_elements.contains_key(value) {
            return Err(Error::DocumentTask(format!("ID '{value}' already exists in DOM",)).into());
        }

        let mut doc = self.get_mut();
        let data = &mut doc
            .get_node_by_id_mut(element_id)
            .ok_or(Box::new(Error::DocumentTask(format!(
                "Node ID {element_id} not found",
            ))))?
            .data;

        let old_id = if let NodeData::Element(element) = data {
            let attributes = &mut element.attributes;
            let old_id = attributes.get("id").map(ToOwned::to_owned);
            attributes.insert("id".into(), value.into());
            old_id
        } else {
            return Err(
                Error::DocumentTask(format!("Node ID {element_id} is not an element")).into(),
            );
        };

        old_id.map(|id| doc.named_id_elements.remove(&id));
        doc.named_id_elements.insert(value.to_owned(), element_id);

        Ok(())
    }

    fn insert_class_attribute(
        &mut self,
        value: &str,
        element_id: NodeId,
        _location: Location,
    ) -> Result<()> {
        let mut doc = self.get_mut();
        let node = doc
            .get_node_by_id_mut(element_id)
            .ok_or(Box::new(Error::DocumentTask(format!(
                "Node ID {element_id} not found",
            ))))?;
        if let NodeData::Element(element) = &mut node.data {
            element.classes = ElementClass::from(value);
        } else {
            return Err(
                Error::DocumentTask(format!("Node ID {element_id} is not an element",)).into(),
            );
        }

        Ok(())
    }

    fn insert_generic_attribute(
        &mut self,
        key: &str,
        value: &str,
        element_id: NodeId,
        _location: Location,
    ) -> Result<()> {
        let mut doc = self.get_mut();
        let node = doc
            .get_node_by_id_mut(element_id)
            .ok_or(Box::new(Error::DocumentTask(format!(
                "Node ID {element_id} not found"
            ))))?;
        if let NodeData::Element(element) = &mut node.data {
            element.attributes.insert(key.to_owned(), value.to_owned());
        } else {
            return Err(
                Error::DocumentTask(format!("Node ID {element_id} is not an element")).into(),
            );
        }

        Ok(())
    }

    fn matches_query_condition(
        &self,
        doc_read: &Document,
        current_node: &Node,
        condition: &Condition,
    ) -> bool {
        match condition {
            Condition::EqualsTag(tag) => current_node.name == *tag,
            Condition::EqualsId(id) => {
                let node_data = &current_node.data;
                if let NodeData::Element(element) = node_data {
                    if let Some(id_attr) = element.attributes.get("id") {
                        return *id_attr == *id;
                    }
                }

                false
            }
            Condition::ContainsClass(class) => {
                let node_data = &current_node.data;
                if let NodeData::Element(element) = node_data {
                    return element.classes.contains(class.as_str());
                }

                false
            }
            Condition::ContainsAttribute(attribute) => {
                let node_data = &current_node.data;
                if let NodeData::Element(element) = node_data {
                    return element.attributes.contains_key(attribute);
                }

                false
            }
            Condition::ContainsChildTag(child_tag) => {
                doc_read.contains_child_tag(current_node.id, child_tag)
            }
            Condition::HasParentTag(parent_tag) => {
                if let Some(parent_id) = current_node.parent {
                    // making an assumption here that the parent node is actually valid
                    let parent = doc_read.get_node_by_id(parent_id).unwrap();
                    return parent.name == *parent_tag;
                }

                false
            }
        }
    }

    /// Perform a single query against the document.
    /// If query search type is uninitialized, returns an error.
    /// Otherwise, returns a vector of NodeIds that match the predicate in tree order (preorder depth-first.)
    pub fn query(&self, query: &Query) -> Result<Vec<NodeId>> {
        if query.search_type == SearchType::Uninitialized {
            return Err(Error::Query("Query predicate is uninitialized".to_owned()).into());
        }

        let doc_read = self.get();
        let mut found_ids = Vec::new();
        let tree_iterator = TreeIterator::new(self);

        for current_node_id in tree_iterator {
            let current_node = doc_read.get_node_by_id(current_node_id).unwrap();

            let mut predicate_result: bool = true;

            for condition in &query.conditions {
                if !self.matches_query_condition(&doc_read, current_node, condition) {
                    predicate_result = false;
                    break;
                }
            }

            if predicate_result {
                found_ids.push(current_node_id);
                if query.search_type == SearchType::FindFirst {
                    return Ok(found_ids);
                }
            }
        }

        Ok(found_ids)
    }

    pub fn deep_clone(&self) -> DocumentHandle {
        let mut doc_handle = Document::shared(None);

        doc_handle
            .get_mut()
            .location
            .clone_from(&self.get().location);
        doc_handle
            .get_mut()
            .named_id_elements
            .clone_from(&self.get().named_id_elements);
        doc_handle.get_mut().doctype = self.get().doctype;
        doc_handle.get_mut().quirks_mode = self.get().quirks_mode;
        doc_handle
            .get_mut()
            .stylesheets
            .clone_from(&self.get().stylesheets);
        doc_handle.get_mut().arena = self.get().arena.clone();

        doc_handle
    }
}

impl TreeBuilder for DocumentHandle {
    /// Creates and attaches a new element node to the document
    fn create_element(
        &mut self,
        name: &str,
        parent_id: NodeId,
        position: Option<usize>,
        namespace: &str,
        location: Location,
    ) -> NodeId {
        let new_element = Node::new_element(self, name, HashMap::new(), namespace, location);
        self.add_node(new_element, parent_id, position)
    }

    /// Creates and attaches a new text node to the document
    fn create_text(&mut self, content: &str, parent_id: NodeId, location: Location) -> NodeId {
        let new_text = Node::new_text(self, location, content);
        self.add_node(new_text, parent_id, None)
    }

    /// Creates and attaches a new comment node to the document
    fn create_comment(&mut self, content: &str, parent_id: NodeId, location: Location) -> NodeId {
        let new_comment = Node::new_comment(self, location, content);
        self.add_node(new_comment, parent_id, None)
    }

    /// Inserts an attribute to an element node.
    /// If node is not an element or if passing an invalid attribute value, returns an Err()
    fn insert_attribute(
        &mut self,
        key: &str,
        value: &str,
        element_id: NodeId,
        location: Location,
    ) -> Result<()> {
        match key {
            "id" => self.insert_id_attribute(value, element_id, location),
            "class" => self.insert_class_attribute(value, element_id, location),
            _ => self.insert_generic_attribute(key, value, element_id, location),
        }
    }
}

/// This struct will be used to create a fully initialized document or document fragment
pub struct DocumentBuilder;

impl DocumentBuilder {
    /// Creates a new document with a document root node
    pub fn new_document(url: Option<Url>) -> DocumentHandle {
        let mut doc = Document::shared(url);

        let handle = &Document::clone(&doc);
        let node = Node::new_document(handle, Location::default());
        doc.get_mut().arena.register_node(node);

        doc
    }

    /// Creates a new document fragment with the context as the root node
    pub fn new_document_fragment(context: &Node) -> DocumentHandle {
        let mut doc = Document::shared(None);
        doc.get_mut().doctype = DocumentType::HTML;

        let doc_weak = Weak::clone(&context.document);
        if let Some(doc_get) = doc_weak.upgrade() {
            if doc_get.borrow().quirks_mode == QuirksMode::Quirks {
                doc.get_mut().quirks_mode = QuirksMode::Quirks;
            } else if doc_get.borrow().quirks_mode == QuirksMode::LimitedQuirks {
                doc.get_mut().quirks_mode = QuirksMode::LimitedQuirks;
            }

            // Copy location
            doc.get_mut()
                .location
                .clone_from(&doc_get.borrow().location);
        }

        // @TODO: Set tokenizer state based on context element

        let html_node = Node::new_element(
            &doc,
            "html",
            HashMap::new(),
            HTML_NAMESPACE,
            context.location.clone(),
        );
        // doc.get_mut().arena.register_node(html_node);
        doc.add_node(html_node, NodeId::root(), None);

        doc
    }
}

/// Constructs an iterator from a given DocumentHandle.
/// WARNING: mutations in the document would be reflected
/// in the iterator. It's advised to consume the entire iterator
/// before mutating the document again.
pub struct TreeIterator {
    current_node_id: Option<NodeId>,
    node_stack: Vec<NodeId>,
    document: DocumentHandle,
}

impl TreeIterator {
    #[must_use]
    pub fn new(document: &DocumentHandle) -> Self {
        Self {
            current_node_id: None,
            document: Document::clone(document),
            node_stack: vec![document.get().get_root().id],
        }
    }
}

impl Iterator for TreeIterator {
    type Item = NodeId;

    fn next(&mut self) -> Option<NodeId> {
        self.current_node_id = self.node_stack.pop();

        if let Some(current_node_id) = self.current_node_id {
            let doc_read = self.document.get();

            if let Some(sibling_id) = self.document.get().get_next_sibling(current_node_id) {
                self.node_stack.push(sibling_id);
            }

            if let Some(current_node) = doc_read.get_node_by_id(current_node_id) {
                if let Some(&child_id) = current_node.children.first() {
                    self.node_stack.push(child_id);
                }
            }
        }

        self.current_node_id
    }
}

#[cfg(test)]
mod tests {
    use crate::node::{NodeTrait, NodeType, HTML_NAMESPACE};
    use crate::parser::document::{DocumentBuilder, DocumentTaskQueue, TreeIterator};
    use crate::parser::query::Query;
    use crate::parser::tree_builder::TreeBuilder;
    use crate::parser::{Node, NodeData, NodeId};
    use gosub_shared::byte_stream::Location;
    use std::collections::HashMap;

    #[test]
    fn relocate() {
        let mut document = DocumentBuilder::new_document(None);

        let parent = Node::new_element(
            &document,
            "parent",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );
        let node1 = Node::new_element(
            &document,
            "div1",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );
        let node2 = Node::new_element(
            &document,
            "div2",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );
        let node3 = Node::new_element(
            &document,
            "div3",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );
        let node3_1 = Node::new_element(
            &document,
            "div3_1",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );

        let parent_id = document
            .get_mut()
            .add_node(parent, NodeId::from(0usize), None);
        let node1_id = document.get_mut().add_node(node1, parent_id, None);
        let node2_id = document.get_mut().add_node(node2, parent_id, None);
        let node3_id = document.get_mut().add_node(node3, parent_id, None);
        let node3_1_id = document.get_mut().add_node(node3_1, node3_id, None);

        assert_eq!(
            format!("{}", document),
            r#"└─ Document
   └─ <parent>
      ├─ <div1>
      ├─ <div2>
      └─ <div3>
         └─ <div3_1>
"#
        );

        document.get_mut().relocate(node3_1_id, node1_id);
        assert_eq!(
            format!("{}", document),
            r#"└─ Document
   └─ <parent>
      ├─ <div1>
      │  └─ <div3_1>
      ├─ <div2>
      └─ <div3>
"#
        );

        document.get_mut().relocate(node1_id, node2_id);
        assert_eq!(
            format!("{}", document),
            r#"└─ Document
   └─ <parent>
      ├─ <div2>
      │  └─ <div1>
      │     └─ <div3_1>
      └─ <div3>
"#
        );
    }

    #[test]
    fn duplicate_named_id_elements() {
        let mut document = DocumentBuilder::new_document(None);

        let div_1 = document.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_2 = document.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        // when adding duplicate IDs, our current implementation will prevent duplicates.
        let mut res = document.insert_attribute("id", "myid", div_1, Location::default());
        assert!(res.is_ok());

        res = document.insert_attribute("id", "myid", div_2, Location::default());
        assert!(res.is_err());
        if let Err(err) = res {
            assert_eq!(
                err.to_string(),
                "document task error: ID 'myid' already exists in DOM"
            );
        }

        assert_eq!(
            document.get().get_node_by_named_id("myid").unwrap().id,
            div_1
        );

        // when div_1's ID changes, "myid" should be removed from the DOM
        res = document.insert_attribute("id", "newid", div_1, Location::default());
        assert!(res.is_ok());
        assert!(document.get().get_node_by_named_id("myid").is_none());
        assert_eq!(
            document.get().get_node_by_named_id("newid").unwrap().id,
            div_1
        );
    }

    #[test]
    fn verify_node_ids_in_element_data() {
        let mut document = DocumentBuilder::new_document(None);

        let node1 = Node::new_element(
            &document,
            "div",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );
        let node2 = Node::new_element(
            &document,
            "div",
            HashMap::new(),
            HTML_NAMESPACE,
            Location::default(),
        );

        document
            .get_mut()
            .add_node(node1, NodeId::from(0usize), None);
        document
            .get_mut()
            .add_node(node2, NodeId::from(0usize), None);

        let doc_ptr = document.get();

        let get_node1 = doc_ptr.get_node_by_id(NodeId::from(1usize)).unwrap();
        let get_node2 = doc_ptr.get_node_by_id(NodeId::from(2usize)).unwrap();

        let NodeData::Element(element1) = &get_node1.data else {
            panic!()
        };

        assert_eq!(element1.node_id, NodeId::from(1usize));

        let NodeData::Element(element2) = &get_node2.data else {
            panic!()
        };

        assert_eq!(element2.node_id, NodeId::from(2usize));
    }

    #[test]
    fn document_task_queue() {
        let document = DocumentBuilder::new_document(None);

        // Using task queue to create the following structure initially:
        // <div>
        //   <p>
        //     <!-- comment inside p -->
        //     hey
        //   </p>
        //   <!-- comment inside div -->
        // </div>

        // then flush the queue and use it again to add an attribute to <p>:
        // <p id="myid">hey</p>
        let mut task_queue = DocumentTaskQueue::new(&document);

        // NOTE: only elements return the ID
        let div_id = task_queue.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        assert_eq!(div_id, NodeId::from(1usize));

        let p_id =
            task_queue.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        assert_eq!(p_id, NodeId::from(2usize));

        task_queue.create_comment("comment inside p", p_id, Location::default());
        task_queue.create_text("hey", p_id, Location::default());
        task_queue.create_comment("comment inside div", div_id, Location::default());

        // at this point, the DOM should have NO nodes (besides root)
        assert_eq!(document.get().arena.count_nodes(), 1);

        // validate our queue is loaded
        assert!(!task_queue.is_empty());
        let errors = task_queue.flush();
        assert!(errors.is_empty());

        // validate queue is empty
        assert!(task_queue.is_empty());

        // DOM should now have all our nodes
        assert_eq!(document.get().arena.count_nodes(), 6);

        // NOTE: these checks are scoped separately since this is using an
        // immutable borrow and we make a mutable borrow after (to insert the attribute).
        // We need this immutable borrow to die off before making a new mutable borrow
        // (and again an immutable borrow for validation afterwards)
        {
            // validate DOM is correctly laid out
            let doc_read = document.get();
            let root = doc_read.get_root(); // <!DOCTYPE html>
            let root_children = &root.children;

            // div child
            let div_child = doc_read.get_node_by_id(root_children[0]).unwrap();
            assert_eq!(div_child.type_of(), NodeType::Element);
            assert_eq!(div_child.name, "div");
            let div_children = &div_child.children;

            // p child
            let p_child = doc_read.get_node_by_id(div_children[0]).unwrap();
            assert_eq!(p_child.type_of(), NodeType::Element);
            assert_eq!(p_child.name, "p");
            let p_children = &p_child.children;

            // comment inside p
            let p_comment = doc_read.get_node_by_id(p_children[0]).unwrap();
            assert_eq!(p_comment.type_of(), NodeType::Comment);
            let NodeData::Comment(p_comment_data) = &p_comment.data else {
                panic!()
            };
            assert_eq!(p_comment_data.value, "comment inside p");

            // body inside p
            let p_body = doc_read.get_node_by_id(p_children[1]).unwrap();
            assert_eq!(p_body.type_of(), NodeType::Text);
            let NodeData::Text(p_body_data) = &p_body.data else {
                panic!()
            };
            assert_eq!(p_body_data.value, "hey");

            // comment inside div
            let div_comment = doc_read.get_node_by_id(div_children[1]).unwrap();
            assert_eq!(div_comment.type_of(), NodeType::Comment);
            let NodeData::Comment(div_comment_data) = &div_comment.data else {
                panic!()
            };
            assert_eq!(div_comment_data.value, "comment inside div");
        }

        // use task queue again to add an ID attribute
        // NOTE: inserting attribute in task queue always succeeds
        // since it doesn't touch DOM until flush
        let _ = task_queue.insert_attribute("id", "myid", p_id, Location::default());
        let errors = task_queue.flush();
        assert!(errors.is_empty());

        let doc_read = document.get();
        // validate ID is searchable in dom
        assert_eq!(*doc_read.named_id_elements.get("myid").unwrap(), p_id);

        // validate attribute is applied to underlying element
        let p_node = doc_read.get_node_by_id(p_id).unwrap();
        let NodeData::Element(p_element) = &p_node.data else {
            panic!()
        };
        assert_eq!(p_element.attributes.get("id").unwrap(), "myid");
    }

    #[test]
    fn task_queue_insert_attribute_failues() {
        let document = DocumentBuilder::new_document(None);

        let mut task_queue = DocumentTaskQueue::new(&document);
        let div_id = task_queue.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        task_queue.create_comment("content", div_id, Location::default()); // this is NodeId::from(2)
        task_queue.flush();

        // NOTE: inserting attribute in task queue always succeeds
        // since it doesn't touch DOM until flush
        let _ =
            task_queue.insert_attribute("id", "myid", NodeId::from(1usize), Location::default());
        let _ =
            task_queue.insert_attribute("id", "myid", NodeId::from(1usize), Location::default());
        let _ =
            task_queue.insert_attribute("id", "otherid", NodeId::from(2usize), Location::default());
        let _ = task_queue.insert_attribute(
            "id",
            "dummyid",
            NodeId::from(42usize),
            Location::default(),
        );
        let _ =
            task_queue.insert_attribute("id", "my id", NodeId::from(1usize), Location::default());
        let _ = task_queue.insert_attribute("id", "123", NodeId::from(1usize), Location::default());
        let _ = task_queue.insert_attribute("id", "", NodeId::from(1usize), Location::default());
        let errors = task_queue.flush();
        for error in &errors {
            println!("{}", error);
        }
        assert_eq!(errors.len(), 5);
        assert_eq!(
            errors[0],
            "document task error: ID 'myid' already exists in DOM",
        );
        assert_eq!(
            errors[1],
            "document task error: Node ID 2 is not an element",
        );
        assert_eq!(errors[2], "document task error: Node ID 42 not found");
        assert_eq!(
            errors[3],
            "document task error: Attribute value 'my id' did not pass validation",
        );
        assert_eq!(
            errors[4],
            "document task error: Attribute value '' did not pass validation",
        );

        // validate that invalid changes did not apply to DOM
        let doc_read = document.get();
        assert!(!doc_read.named_id_elements.contains_key("my id"));
        assert!(!doc_read.named_id_elements.contains_key(""));
    }

    // this is basically a replica of document_task_queue() test
    // but using tree builder directly instead of the task queue
    #[test]
    fn document_tree_builder() {
        let mut document = DocumentBuilder::new_document(None);

        // Using tree builder to create the following structure:
        // <div>
        //   <p id="myid">
        //     <!-- comment inside p -->
        //     hey
        //   </p>
        //   <!-- comment inside div -->
        // </div>

        // NOTE: only elements return the ID
        let div_id = document.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        assert_eq!(div_id, NodeId::from(1usize));

        let p_id = document.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        assert_eq!(p_id, NodeId::from(2usize));

        document.create_comment("comment inside p", p_id, Location::default());
        document.create_text("hey", p_id, Location::default());
        document.create_comment("comment inside div", div_id, Location::default());

        let res = document.insert_attribute("id", "myid", p_id, Location::default());
        assert!(res.is_ok());

        // DOM should now have all our nodes
        assert_eq!(document.get().arena.count_nodes(), 6);

        // validate DOM is correctly laid out
        let doc_read = document.get();
        let root = doc_read.get_root(); // <!DOCTYPE html>
        let root_children = &root.children;

        // div child
        let div_child = doc_read.get_node_by_id(root_children[0]).unwrap();
        assert_eq!(div_child.type_of(), NodeType::Element);
        assert_eq!(div_child.name, "div");
        let div_children = &div_child.children;

        // p child
        let p_child = doc_read.get_node_by_id(div_children[0]).unwrap();
        assert_eq!(p_child.type_of(), NodeType::Element);
        assert_eq!(p_child.name, "p");
        let p_children = &p_child.children;

        // comment inside p
        let p_comment = doc_read.get_node_by_id(p_children[0]).unwrap();
        assert_eq!(p_comment.type_of(), NodeType::Comment);
        let NodeData::Comment(p_comment_data) = &p_comment.data else {
            panic!()
        };
        assert_eq!(p_comment_data.value, "comment inside p");

        // body inside p
        let p_body = doc_read.get_node_by_id(p_children[1]).unwrap();
        assert_eq!(p_body.type_of(), NodeType::Text);
        let NodeData::Text(p_body_data) = &p_body.data else {
            panic!()
        };
        assert_eq!(p_body_data.value, "hey");

        // comment inside div
        let div_comment = doc_read.get_node_by_id(div_children[1]).unwrap();
        assert_eq!(div_comment.type_of(), NodeType::Comment);
        let NodeData::Comment(div_comment_data) = &div_comment.data else {
            panic!()
        };
        assert_eq!(div_comment_data.value, "comment inside div");

        // validate ID is searchable in dom
        assert_eq!(*doc_read.named_id_elements.get("myid").unwrap(), p_id);

        // validate attribute is applied to underlying element
        let p_node = doc_read.get_node_by_id(p_id).unwrap();
        let NodeData::Element(p_element) = &p_node.data else {
            panic!()
        };
        assert_eq!(p_element.attributes.get("id").unwrap(), "myid");
    }

    #[test]
    fn insert_generic_attribute() {
        let mut doc = DocumentBuilder::new_document(None);
        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let res = doc.insert_attribute("key", "value", div_id, Location::default());
        assert!(res.is_ok());
        let doc_read = doc.get();
        let NodeData::Element(element) = &doc_read.get_node_by_id(div_id).unwrap().data else {
            panic!()
        };
        assert_eq!(element.attributes.get("key").unwrap(), "value");
    }

    #[test]
    fn task_queue_insert_generic_attribute() {
        let doc = DocumentBuilder::new_document(None);
        let mut task_queue = DocumentTaskQueue::new(&doc);
        let div_id = task_queue.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = task_queue.insert_attribute("key", "value", div_id, Location::default());
        let errors = task_queue.flush();
        assert!(errors.is_empty());
        let doc_read = doc.get();
        let NodeData::Element(element) = &doc_read.get_node_by_id(div_id).unwrap().data else {
            panic!()
        };
        assert_eq!(element.attributes.get("key").unwrap(), "value");
    }

    #[test]
    fn insert_class_attribute() {
        let mut doc = DocumentBuilder::new_document(None);
        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let res = doc.insert_attribute("class", "one two three", div_id, Location::default());
        assert!(res.is_ok());
        let doc_read = doc.get();
        let NodeData::Element(element) = &doc_read.get_node_by_id(div_id).unwrap().data else {
            panic!()
        };
        assert!(element.classes.contains("one"));
        assert!(element.classes.contains("two"));
        assert!(element.classes.contains("three"));
    }

    #[test]
    fn task_queue_insert_class_attribute() {
        let doc = DocumentBuilder::new_document(None);
        let mut task_queue = DocumentTaskQueue::new(&doc);
        let div_id = task_queue.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = task_queue.insert_attribute("class", "one two three", div_id, Location::default());
        let errors = task_queue.flush();
        assert!(errors.is_empty());
        let doc_read = doc.get();
        let NodeData::Element(element) = &doc_read.get_node_by_id(div_id).unwrap().data else {
            panic!()
        };
        assert!(element.classes.contains("one"));
        assert!(element.classes.contains("two"));
        assert!(element.classes.contains("three"));
    }

    #[test]
    fn uninitialized_query() {
        let doc = DocumentBuilder::new_document(None);

        let query = Query::new();
        let found_ids = doc.query(&query);
        if let Err(err) = found_ids {
            assert_eq!(
                err.to_string(),
                "query: generic error: Query predicate is uninitialized"
            );
        } else {
            panic!()
        }
    }

    #[test]
    fn single_query_equals_tag_find_first() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().equals_tag("p").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [p_id]);
    }

    #[test]
    fn single_query_equals_tag_find_all() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let p_id_2 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let p_id_3 = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let p_id_4 = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().equals_tag("p").find_all();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 4);
        assert_eq!(found_ids, [p_id, p_id_2, p_id_3, p_id_4]);
    }

    #[test]
    fn single_query_equals_id() {
        // <div>
        //     <div>
        //         <p>
        //     <p id="myid">
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let p_id_2 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        let res = doc.insert_attribute("id", "myid", p_id_2, Location::default());
        assert!(res.is_ok());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().equals_id("myid").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [p_id_2]);
    }

    #[test]
    fn single_query_contains_class_find_first() {
        // <div>
        //     <div>
        //         <p class="one two">
        //     <p class="one">
        // <div>
        //     <p class="two three">
        // <p class="three">
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let mut res = doc.insert_attribute("class", "one two", p_id, Location::default());
        assert!(res.is_ok());
        let p_id_2 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("class", "one", p_id_2, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("id", "myid", p_id_2, Location::default());
        assert!(res.is_ok());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let p_id_3 = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("class", "two three", p_id_3, Location::default());
        assert!(res.is_ok());

        let p_id_4 = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("class", "three", p_id_4, Location::default());
        assert!(res.is_ok());

        let query = Query::new().contains_class("two").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [p_id]);
    }

    #[test]
    fn single_query_contains_class_find_all() {
        // <div>
        //     <div>
        //         <p class="one two">
        //     <p class="one">
        // <div>
        //     <p class="two three">
        // <p class="three">
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let mut res = doc.insert_attribute("class", "one two", p_id, Location::default());
        assert!(res.is_ok());
        let p_id_2 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("class", "one", p_id_2, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("id", "myid", p_id_2, Location::default());
        assert!(res.is_ok());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let p_id_3 = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("class", "two three", p_id_3, Location::default());
        assert!(res.is_ok());

        let p_id_4 = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("class", "three", p_id_4, Location::default());
        assert!(res.is_ok());

        let query = Query::new().contains_class("two").find_all();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 2);
        assert_eq!(found_ids, [p_id, p_id_3]);
    }

    #[test]
    fn single_query_contains_attribute_find_first() {
        // <div>
        //     <div id="myid" style="somestyle">
        //         <p title="hey">
        //     <p>
        // <div style="otherstyle" id="otherid">
        //     <p>
        // <p title="yo" style="cat">
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let mut res = doc.insert_attribute("id", "myid", div_id_2, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("style", "somestyle", div_id_2, Location::default());
        assert!(res.is_ok());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("title", "key", p_id, Location::default());
        assert!(res.is_ok());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("style", "otherstyle", div_id_3, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("id", "otherid", div_id_3, Location::default());
        assert!(res.is_ok());
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let p_id_4 = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("title", "yo", p_id_4, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("style", "cat", p_id_4, Location::default());
        assert!(res.is_ok());

        let query = Query::new().contains_attribute("style").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [div_id_2]);
    }

    #[test]
    fn single_query_contains_attribute_find_all() {
        // <div>
        //     <div id="myid" style="somestyle">
        //         <p title="hey">
        //     <p>
        // <div style="otherstyle" id="otherid">
        //     <p>
        // <p title="yo" style="cat">
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let mut res = doc.insert_attribute("id", "myid", div_id_2, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("style", "somestyle", div_id_2, Location::default());
        assert!(res.is_ok());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        res = doc.insert_attribute("title", "key", p_id, Location::default());
        assert!(res.is_ok());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("style", "otherstyle", div_id_3, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("id", "otherid", div_id_3, Location::default());
        assert!(res.is_ok());
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let p_id_4 = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        res = doc.insert_attribute("title", "yo", p_id_4, Location::default());
        assert!(res.is_ok());
        res = doc.insert_attribute("style", "cat", p_id_4, Location::default());
        assert!(res.is_ok());

        let query = Query::new().contains_attribute("style").find_all();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 3);
        assert_eq!(found_ids, [div_id_2, div_id_3, p_id_4]);
    }

    #[test]
    fn single_query_contains_child_find_first() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().contains_child_tag("p").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [NodeId::root()]);
    }

    #[test]
    fn single_query_contains_child_find_all() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().contains_child_tag("p").find_all();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 4);
        assert_eq!(found_ids, [NodeId::root(), div_id, div_id_2, div_id_3]);
    }

    #[test]
    fn single_query_has_parent_find_first() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let _ = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let _ = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().has_parent_tag("div").find_first();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 1);
        assert_eq!(found_ids, [div_id_2]);
    }

    #[test]
    fn single_query_has_parent_find_all() {
        // <div>
        //     <div>
        //         <p>
        //     <p>
        // <div>
        //     <p>
        // <p>
        let mut doc = DocumentBuilder::new_document(None);

        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let p_id_2 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());

        let div_id_3 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let p_id_3 = doc.create_element("p", div_id_3, None, HTML_NAMESPACE, Location::default());

        let _ = doc.create_element(
            "p",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let query = Query::new().has_parent_tag("div").find_all();
        let found_ids = doc.query(&query).unwrap();
        assert_eq!(found_ids.len(), 4);
        assert_eq!(found_ids, [div_id_2, p_id, p_id_2, p_id_3]);
    }

    #[test]
    fn tree_iterator() {
        let mut doc = DocumentBuilder::new_document(None);

        // <div>
        //     <div>
        //         <p>first p tag
        //         <p>second p tag
        //     <p>third p tag
        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        let div_id_2 = doc.create_element("div", div_id, None, HTML_NAMESPACE, Location::default());
        let p_id = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let text_id = doc.create_text("first p tag", p_id, Location::default());
        let p_id_2 = doc.create_element("p", div_id_2, None, HTML_NAMESPACE, Location::default());
        let text_id_2 = doc.create_text("second p tag", p_id_2, Location::default());
        let p_id_3 = doc.create_element("p", div_id, None, HTML_NAMESPACE, Location::default());
        let text_id_3 = doc.create_text("third p tag", p_id_3, Location::default());

        let tree_iterator = TreeIterator::new(&doc);

        let expected_order = vec![
            NodeId::root(),
            div_id,
            div_id_2,
            p_id,
            text_id,
            p_id_2,
            text_id_2,
            p_id_3,
            text_id_3,
        ];

        let mut traversed_nodes = Vec::new();
        for current_node_id in tree_iterator {
            traversed_nodes.push(current_node_id);
        }

        assert_eq!(expected_order, traversed_nodes);
    }

    #[test]
    fn tree_iterator_mutation() {
        let mut doc = DocumentBuilder::new_document(None);
        let div_id = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );

        let mut tree_iterator = TreeIterator::new(&doc);
        let mut current_node_id;

        current_node_id = tree_iterator.next();
        assert_eq!(current_node_id.unwrap(), NodeId::root());

        // we mutate the tree while the iterator is still "open"
        let div_id_2 = doc.create_element(
            "div",
            NodeId::root(),
            None,
            HTML_NAMESPACE,
            Location::default(),
        );
        current_node_id = tree_iterator.next();
        assert_eq!(current_node_id.unwrap(), div_id);

        // and find this node on next iteration
        current_node_id = tree_iterator.next();
        assert_eq!(current_node_id.unwrap(), div_id_2);
    }
}
